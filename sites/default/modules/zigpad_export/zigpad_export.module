<?php


/**
 * Implements hook_menu().
 */
function zigpad_export_menu() {
  $items['1/zigpad/config.xml'] = array(
    'title' => 'Zigpad Export',
    'page callback' => 'zigpad_export_config',
    'access callback' => TRUE,
  );
  return $items;
}

/**
 * Page callback for zigpad export.
 */
function zigpad_export_config() {

  $schema_url = url('zigpad/schema.xml', array('absolute' => TRUE));

  $xml = new SimpleXMLElement('<?xml version="1.0" encoding="UTF-8" ?><config xmlns="' . $schema_url . '"></config>');

  // Add actions to XML.
  $anids = db_query("SELECT nid FROM {node} WHERE type LIKE '%_action'")->fetchCol();
  $actions = $xml->addChild('actions');
  foreach (node_load_multiple($anids) as $node) {
    $action = $actions->addChild('action');
    $type = substr($node->type, 0, strpos($node->type, '_action'));
    $action->addAttribute('id', $node->nid);
    $action->addAttribute('name', $node->title);
    $action->addAttribute('type', $type);
    $favorite = field_get_items('node', $node, 'field_favorite');
    $action->addAttribute('favorite', isset($favorite[0]['value']) ? $favorite[0]['value'] : 0);
    
    // For performance reasons, make sure that there is always a favorite_icon
    // if the action is a favorite.
    $needs_favorite_icon = !empty($favorite[0]['value']);
    $image_uri = NULL;

    $fields = field_info_instances('node', $node->type);

    foreach($fields as $field_name => $field) {
      // Ignore favorite field.
      if ($field_name == 'field_favorite' || strpos($field_name, 'field_') !== 0) {
        continue;
      }

      $field_info = field_info_field($field_name);
      if ($field_content = field_get_items('node', $node, $field_name)) {

        $key = substr($field_name, 6);

        switch ($field_info['type']) {
          case 'image':
            $param = $action->addChild('param');
            $param->addAttribute('key', $key);
            
            // Get image style from zigpad_export view mode.
            $image_style = $field['display']['zigpad_export']['settings']['image_style'];
            $param->addAttribute('picture', image_style_url($image_style, $field_content[0]['uri']));
            
            if ($needs_favorite_icon) {
              // Check if this is the favorite_icon image, if yes, set flag that
              // there is a favorite icon if not, store the image url if there is
              // none yet.
              if ($key == 'favorite_icon') {
                $needs_favorite_icon = FALSE;
              }
              elseif (!$image_uri) {
                $image_uri = $field_content[0]['uri'];
              }
            }
            
            break;

          default:
            // All fields which have a value (textfield, areas, ..) are simply added as-is.
            if (isset($field_content[0]['value'])) {
              
              // Do not add stay field if it is 0.
              if ($key == 'stay' && empty($field_content[0]['value'])) {
                continue;
              }
              
              $param = $action->addChild('param');
              $param->addAttribute('key', $key);
              $param->addAttribute('value', $field_content[0]['value']);
            }
            break;
        }
      }
    }
    
    // If there needs to be a favorite icon and we have a image uri, add 
    // hardcoded one.
    if ($needs_favorite_icon && $image_uri) {
      $param = $action->addChild('param');
      $param->addAttribute('key', 'favorite_icon');
      $param->addAttribute('picture', image_style_url('favorite_icon', $image_uri));
    }
  }

  // Add scenes to XML.
  $snids = db_query("SELECT nid FROM {node} WHERE type = 'sequence'")->fetchCol();
  $sequences = $xml->addChild('sequences');
  foreach (node_load_multiple($snids) as $node) {
    $sequence = $sequences->addChild('sequence');
    $sequence->addAttribute('id', $node->nid);
    $sequence->addAttribute('name', $node->title);
    if ($picture = field_get_items('node', $node, 'field_picture')) {
      $field = field_info_instance('node', 'field_picture', $node->type);
      $image_style = $field['display']['zigpad_export']['settings']['image_style'];
      $sequence->addAttribute('icon', image_style_url($image_style, $picture[0]['uri']));
    }
    if ($command = field_get_items('node', $node, 'field_command')) {
      $sequence->addAttribute('command', $command[0]['value']);
    }
    if ($actions = field_get_items('node', $node, 'field_actions')) {
      foreach ($actions as $action) {
        $sequence
          ->addChild('actionRef')
          ->addAttribute('ref', $action['nid']);
      }
    }
  }

  // Add presentations to XML.
  $pnids = db_query("SELECT nid FROM {node} WHERE type = 'presentation'")->fetchCol();
  $presentations = $xml->addChild('presentations');
  foreach (node_load_multiple($pnids) as $node) {
    $presentation = $presentations->addChild('presentation');
    $presentation->addAttribute('id', $node->nid);
    $presentation->addAttribute('name', $node->title);
    if ($comment = field_get_items('node', $node, 'field_comment')) {
      $presentation->addAttribute('comment', $comment[0]['value']);
    }
    if ($sequences = field_get_items('node', $node, 'field_scenes')) {
      foreach ($sequences as $sequence) {
        $presentation
          ->addChild('sequenceRef')
          ->addAttribute('ref', $sequence['nid']);
      }
    }
  }

  // Allow other modules to alter the XML.
  drupal_alter('zigpad_export_xml', $xml);

  header('Content-Type: application/xml');
  echo $xml->asXML();
}

/**
 * Implements hook_entity_info()
 */
function zigpad_export_entity_info() {
  $return['node']['view modes'] = array(
    'zigpad_export' => array(
      'label' => t('ZigPad Export'),
      'custom settings' => TRUE,
    ),
    'zigpad_inline' => array(
      'label' => t('ZigPad Inline'),
      'custom settings' => TRUE,
    ),
  );
  return $return;
}
