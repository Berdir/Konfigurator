<?php

/**
 * @file
 * Call the endpoint tests when no authentication is being used.
 *
 */

/**
 * Run test cases for the endpoint with no authentication turned on.
 *
 */
class ServicesResourceCommentTests extends ServicesWebTestCase {
  // Class variables
  protected $privileged_user = NULL ;
  // Endpoint details.
  protected $endpoint = NULL;

  /**
   * Implementation of setUp().
   */
  public function setUp() {
    parent::setUp(
      'ctools',
      'services',
      'rest_server'
    );
    // Set up endpoint.
    $this->endpoint =  $this->saveNewEndpoint();

    // Create and log in our privileged user.
    $this->privileged_user = $this->drupalCreateUser();
    $this->drupalLogin($this->privileged_user);
  }

  /**
   * Implementation of getInfo().
   */
  public static function getInfo() {
   return array(
     'name'        => t('Resource Comment'),
     'description' => t('Test the resource Comment methods and actions.'),
     'group'       => t('Services'),
   );
  }

  /**
   * Test create comment.
   */
  public function testCommentCreate() {
    $node = $this->drupalCreateNode();

    // Create comment.
    $comment = $this->getCommentValues($node->nid);

    $response_array = $this->servicesPost($this->endpoint->path . '/comment', array('comment' => $comment));
    $commentResourceCreateReturn = $response_array['body'];
    $this->assertTrue(isset($commentResourceCreateReturn['cid']), t('Comment was successfully created'), 'CommentResource: Create');

    // Assert subject and body of comment are the same as we created.
    $newComment = comment_load($commentResourceCreateReturn['cid']);
    $this->assertTrue($newComment->subject == $comment['subject'], t('Subject was the same'), 'CommentResource: Create');
    $this->assertTrue($newComment->comment_body[LANGUAGE_NONE][0]['value'] == $comment['comment_body'][LANGUAGE_NONE][0]['value'], t('Body was the same'), 'CommentResource: Create');

    // Try to create comment with full_html filter that is disabled by default.
    $comment = array(
      'subject' => $this->randomString(),
      'comment_body' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $this->randomString(),
            'format' => 'full_html',
          )
        )
      ),
      'name' => $this->privileged_user->name,
      'language' => LANGUAGE_NONE,
      'nid' => $node->nid,
      'uid' => $this->privileged_user->uid,
      'cid' => NULL,
      'pid' => 0,
    );
    $response_array = $this->servicesPost($this->endpoint->path . '/comment', array('comment' => $comment));

    $this->assertTrue(strpos($response_array['status'], t('An illegal choice has been detected.')), t('User cannot post comment with full_html filter chosen.'), 'CommentResource: Create');
  }

  /**
   * Test retrieve method.
   */
  function testCommentRetrieve() {
    $path = $this->endpoint->path;

    // Create node.
    $node = $this->drupalCreateNode();

    $comment_args = $this->getCommentValues($node->nid);

    $comment = (object)$comment_args;

    comment_save($comment);
    $comment_args['cid'] = $comment->cid;

    $response = $this->servicesGet($path . '/comment/' . $comment->cid);

    $comment_retrieve = (array)$response['body'];

    $comment_intersect = array_intersect_assoc($comment_retrieve, $comment_args);

    // Unset save_value as we don't have this key in arguments.
    unset($comment_intersect['comment_body'][LANGUAGE_NONE][0]['safe_value']);

    $this->assertEqual($comment_args, $comment_intersect, t('Comment retrieved properly.'), 'CommentResource: Retrieve');
  }

  /**
   * Test update method.
   */
  function testCommentUpdate() {
    $path = $this->endpoint->path;

    // Create node.
    $node = $this->drupalCreateNode();

    $comment_args = $this->getCommentValues($node->nid);

    $comment = (object)$comment_args;

    comment_save($comment);
    $cid = $comment->cid;
    $comment_args['cid'] = $cid;

    $comment_update = $comment_args;
    $comment_update['subject'] = $this->randomString();
    $comment_update['comment_body'][LANGUAGE_NONE][0]['value'] = $this->randomString();

    $response = $this->servicesPut($path . '/comment/' . $cid, array('data' => $comment_update));

    $comment_load = (array)comment_load($cid);

    $comment_intersect = array_intersect_assoc($comment_load, $comment_update);

    // Unset save_value as we don't have this key in arguments.
    unset($comment_intersect['comment_body'][LANGUAGE_NONE][0]['safe_value']);

    $this->assertEqual($comment_update, $comment_intersect, t('Comment updated properly.'), 'CommentResource: Update');
  }

  /**
   * Test delete method.
   */
  function testCommentDelete() {
    $path = $this->endpoint->path;

    // Create node with commenting.
    $node = $this->drupalCreateNode();

    $comment_args = $this->getCommentValues($node->nid);

    $comment = (object)$comment_args;

    comment_save($comment);
    $cid = $comment->cid;
    $comment_args['cid'] = $cid;

    $response = $this->servicesDelete($path . '/comment/' . $cid);

    $comment_load = comment_load($cid);

    $this->assertTrue(empty($comment_load), t('Comment deleted properly.'), 'CommentResource: Delete');
  }

  /**
   * Test loadNodeComments method.
   */
  function testCommentLoadNodeComments() {
    $path = $this->endpoint->path;

    // Create node with commenting.
    $node = $this->drupalCreateNode();
    $nid = $node->nid;

    // Generate 15 comments for node.
    $comments = array();
    for ($i = 0; $i < 15; $i++) {
      $comment = (object)$this->getCommentValues($nid);
      comment_save($comment);
      $comments[] = comment_load($comment->cid);
    }

    // Generate some comments for another node.
    $node2 = $this->drupalCreateNode();
    for ($i = 0; $i < 5; $i++) {
      $comment = (object)$this->getCommentValues($node2->nid);
      comment_save($comment);
    }

    // Load all comments of the first node.
    $response = $this->servicesPost($path . '/comment/loadNodeComments', array('nid' => $nid));
    $this->assertEqual(array_slice($comments, 0, 10), $response['body'], t('Received all 15 comments.'), 'CommentResource: loadNodeComments');

    // Load only 5 comments of the first node.
    $response = $this->servicesPost($path . '/comment/loadNodeComments', array('nid' => $nid, 'count' => 5));
    $this->assertEqual(array_slice($comments, 0, 5), $response['body'], t('Received last 5 comments.'), 'CommentResource: loadNodeComments');

    // Load only 5 comments of the first node starting from fifth comment.
    $response = $this->servicesPost($path . '/comment/loadNodeComments', array('nid' => $nid, 'count' => 5, 'start' => 5));
    $this->assertEqual(array_slice($comments, 5, 5), $response['body'], t('Received 5 comments starting from fifth comment.'), 'CommentResource: loadNodeComments');
  }

  /**
   * Test countAll method.
   */
  function testCommentCountAll() {
    $path = $this->endpoint->path;
    // Generate comments.
    $settings = array('comment' => 1);
    $node = $this->drupalCreateNode($settings);
    for ($i = 0; $i < 5; $i++) {
      $comment = (object)$this->getCommentValues($node->nid);
      comment_save($comment);
    }

    $response = $this->servicesPost($path . '/comment/countAll', array('nid' => $node->nid));
    $this->assertEqual($response['body'], 5, t('Counted number of comments properly.'), 'CommentResource: countAll');
  }

  /**
   * Test countNew method.
   */
  function testCommentCountNew() {
    $path = $this->endpoint->path;
    // Generate comments.
    $node = $this->drupalCreateNode();
    $nid = $node->nid;
    for ($i = 0; $i < 5; $i++) {
      $comment = (object)$this->getCommentValues($nid);
      $comment->created = REQUEST_TIME + $i;
      comment_save($comment);
      $comments[] = comment_load($comment->cid);
    }

    $response = $this->servicesPost($path . '/comment/countNew', array('nid' => $node->nid));
    $this->assertEqual($response['body'], 5, t('Received number of all new comments.'), 'CommentResource: countNew');

    $since = $comments[2]->created;

    $response = $this->servicesPost($path . '/comment/countNew', array('nid' => $node->nid, 'since' => $since));
    $this->assertEqual($response['body'], 2, t('Received number of new comments.'), 'CommentResource: countNew');
  }

  /**
   * Default values of comment for creating.
   */
  public function getCommentValues($nid) {
    return array(
      'subject' => $this->randomString(),
      'comment_body' => array(
        LANGUAGE_NONE => array(
          array(
            'value' => $this->randomString(),
            'format' => filter_default_format(),
          )
        )
      ),
      'name' => $this->privileged_user->name,
      'language' => LANGUAGE_NONE,
      'nid' => $nid,
      'uid' => $this->privileged_user->uid,
      'cid' => NULL,
      'pid' => 0,
    );
  }
}
